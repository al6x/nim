template build_el*[T: Component](ComponentT: type[T], attrs: tuple, code): El =
  let component = when compiles(ComponentT.init): ComponentT.init else: ComponentT()
  component_set_attrs(component, attrs)
  let content = els(code)
  render(component, content)

template build_el*[T: Component](ComponentT: type[T], attrs: tuple): El =
  let attrsv = attrs
  let component = when compiles(ComponentT.init): ComponentT.init else: ComponentT()
  component_set_attrs(component, attrs)
  render(component)

template el*[T: Component](ComponentT: type[T], attrs: tuple, code): auto =
  add_or_return_el build_el(ComponentT, attrs, code)

template el*[T: Component](ComponentT: type[T], attrs: tuple): auto =
  add_or_return_el build_el(ComponentT, attrs)


macro set_attr_with_fn*(self: El, k: string, v: untyped): auto =
  let fn = ident k.str_val
  quote do:
    `fn`(`self`, `v`)


template define_session*(SessionType, ComponentType) =
  # Magical code to overcome Nim inability to store generics in collection and autocast to subclass.
  # Defining methods on Session, forwarding calls to Component subclass.
  type SessionType* = ref object of Session

  proc init*(_: type[SessionType], app: ComponentType): SessionType =
    SessionType(id: secure_random_token(6), last_accessed_ms: timer_ms(), app: app)

  method forward_process*(self: SessionType, events: openarray[InEvent]): Option[El] =
    let app: ComponentType = self.app.ComponentType
    app.process(self.el, events)

  method forward_page*(self: SessionType, app_el: El): SafeHtml =
    let app: ComponentType = self.app.ComponentType
    when compiles(app.page(app_el)): app.page(app_el)
    else:                            default_html_page(app_el)

  method forward_on_binary*(self: SessionType, url: Url): BinaryResponse =
    let app: ComponentType = self.app.ComponentType
    when compiles(app.on_binary url): app.on_binary url
    else:                             http_response "app.on_binary not defined", 400


method forward_process*(self: Session, events: openarray[InEvent]): Option[El] {.base.} = throw "Not implemented"
method forward_page*(self: Session, el: El): SafeHtml {.base.} = throw "Not implemented"
method forward_on_binary*(self: Session, url: Url): BinaryResponse {.base.} = throw "Not implemented"




macro define_session_for*(ComponentType) =
  # Magical code to overcome Nim inability to store generics in collection and autocast to subclass.
  # Defining methods on Session, forwarding calls to Component subclass.
  let SessionType = ident $(ComponentType) & "Session"
  quote do:
    type `SessionType`* = ref object of Session

    proc init*(_: type[`SessionType`], app: `ComponentType`): `SessionType` =
      `SessionType`(id: secure_random_token(6), last_accessed_ms: timer_ms(), app: app)

    method forward_process*(self: `SessionType`, events: openarray[InEvent]): Option[El] =
      let app: `ComponentType` = self.app.`ComponentType`
      app.process(self.el, events)

    method forward_page*(self: `SessionType`, app_el: El): SafeHtml =
      let app: `ComponentType` = self.app.`ComponentType`
      when compiles(app.page(app_el)): app.page(app_el)
      else:                            default_html_page(app_el)

    method forward_on_binary*(self: `SessionType`, url: Url): BinaryResponse =
      let app: `ComponentType` = self.app.`ComponentType`
      when compiles(app.on_binary url): app.on_binary url
      else:                             http_response "app.on_binary not defined", 400

proc serve_app_html*(
  req: Request, asset_paths: seq[string], page_fname: string, mono_id, html: string, meta: string
): Future[void] {.async.} =
  let data = read_asset_file(asset_paths, "/" & page_fname)
    .replace("{mono_id}", mono_id)
    .replace("{html}", html)
    .replace("{meta}", meta)
  await req.respond(data, "text/html")


    AppFn*    = proc(events: seq[InEvent], mono_id: string): seq[OutEvent]
  PageFn*   = proc(initial_el: El): SafeHtml
  OnBinary* = proc(url: Url): BinaryResponse


method serve_asset*(doc: DocSource, doc: Doc, space: Space, asset: string): BinaryResponse {.base.} =
  throw "not implemented"

method render_doc*(doc: DocSource, space: Space): El {.base.} =
  throw "not implemented"


FTableBlock* = ref object of FBlock
    # table*: seq[seq[seq[FTextItem]]]
    header: Table[string, seq[FTextItem]]
    order:  seq[string]
    rows:   seq[Table[string, seq[FTextItem]]]

proc parse_table_as_table(pr: Parser) =
  let is_row_delimiter = block:
    let pr = pr.scopy
    # Default delimiter is newline, but if there's double newline happens anywhere in table text, then
    # the double newline used as delimiter.
    pr.skip space_chars
    proc is_double_newline: bool = pr.get == '\n' and pr.get(1) == '\n'
    discard pr.consume_inline_text(is_double_newline) # need to skip text embed that may have newlines
    if is_double_newline():
      proc(pr: Parser): bool = pr.get == '\n' and pr.get(1) == '\n'
    else:
      proc(pr: Parser): bool = pr.get == '\n'

  proc col_delimiter = if pr.find_without_embed((c) => c == '|'): '|' else: ','

  var row = Table[string, seq[FTextItem]].init; var col_id: string; var is_first_row = true

  proc is_header(): bool =
    pr.starts_with("header") and pr.get(6) == '\n' or pr.get(6).is_none

  proc stop(): bool =
    pr.get in {col_delimiter, ':'} or pr.is_row_delimiter() or is_header()

  template finish_row(code) =
    if not col_id.is_empty:
      row[col_id] = token
      col_id = ""
    if not row.is_empty:
      code
      row = Table[string, seq[FTextItem]].init
    is_first_row = false

  while pr.has:
    pr.skip space_chars
    let token = pr.consume_inline_text(stop, trim = true)
    if   is_header(): # header
      finish_row:
        result.header = row
      pr.skip "header".to_bitset
    if   pr.is_row_delimiter(): # row delimiter
      finish_row:
        result.rows.add row
    elif pr.get == ':': # id delimiter
      # p "id delimiter"
      if token.len == 1 and token[0].kind == FTextItemKind.text and col_id.is_empty:
        col_id = token[0].text
        assert col_id.trim == col_id
        if is_first_row: result.order.add col_id
      else:
        pr.warns.add "Invalid column id"
    elif pr.get == ',': # column delimiter
      # p "col delimiter"
      if not col_id.is_empty:
        row[col_id] = token
        col_id = ""
      else:
        pr.warns.add "No column id"
    else:
      # p "else"
      unless col_id.is_empty:
        row[col_id] = token
        col_id = ""
      unless row.is_empty:
        result.rows.add row
        row = Table[string, seq[FTextItem]].init
      if pr.has: pr.warns.add "Unknown content in table: '" & pr.remainder & "'"
      break
    pr.inc

proc parse_table*(raw: FRawBlock, doc: FDoc, config: FParseConfig): FTableBlock =
  assert raw.kind == "table"
  let pr = Parser.init raw.text
  let (order, rows) = pr.parse_table_as_table
  p order
  p rows
  p pr.warns
  let blk = FTableBlock(warns: pr.warns)



  function to_element(data: Record<string, unknown>): HTMLElement {
  let tag: string = "tag" in data ? data["tag"] as string : "div"
  let el = document.createElement(tag)

  for (const k in data) {
    if (["c", "tag", "children", "text", "html"].indexOf(k) >= 0) continue
    el.setAttribute(k, "" + data[k])
  }
  if        ("text" in data) {
    assert(!("children" in data), "to_element doesn't support both text and children")
    assert(!("html" in data),     "to_element doesn't support both text and html")
    el.textContent = "" + data["text"]
  } else if ("html" in data) {
    assert(!("children" in data), "to_element doesn't support both html and children")
    el.innerHTML = "" + data["html"]
  } else if ("children" in data) {
    assert(Array.isArray(data["children"]), "to_element element children should be JArray")
    let children = data["children"] as Record<string, unknown>[]
    for (const child of children) el.appendChild(to_element(child))
  }
  return el
}


let attr_properties = ["input.value"], boolean_attr_properties = ["input.checkbox.checked"]
function set_attr(el: HTMLElement, k: string, v: string) {
  // Some attrs requiring special threatment
  if (boolean_attr_properties.includes(k)) {
    (el as any)[k] = !!v
  } else if (attr_properties.includes(k)) {
    (el as any)[k] = v
  } else {
    el.setAttribute(k, v)
  }
}

function del_attr(el: HTMLElement, k: string) {
  if (boolean_attr_properties.includes(k)) {
    (el as any)[k] = false
  } else {
    el.removeAttribute(k)
  }
}

type TagEl  = { kind: "el",   tag: string, attrs: Record<string, string>, children: El[] }
type TextEl = { kind: "text", text: string }
type HtmlEl = { kind: "html", html: SafeHtml }
// type ListEl = { kind: "list", children: El[] }
type El = TagEl | TextEl | HtmlEl



# initial_root_el ----------------------------------------------------------------------------------
proc initial_root_el*(events: seq[OutEvent]): El =
  assert events.len == 1, "to_html can't convert more than single event"
  assert events[0].kind == update, "to_html can't convert event other than update"
  assert events[0].updates.len == 1, "to_html can't convert more than single update"
  let update = events[0].updates[0]
  assert update.el == @[], "to_html can convert only root element"
  assert (
    update.set_attrs.is_none and update.del_attrs.is_none and
    update.set_children.is_none and update.del_children.is_none
  ), "to_html requires all changes other than `set` be empty"
  assert update.set.is_some, "to_html the `set` required"
  update.set.get

UpdateEl* = ref object
    el*:           seq[int]
    set*:          Option[El]
    set_attrs*:    Option[Table[string, string]]
    del_attrs*:    Option[seq[string]]
    set_children*: Option[Table[string, El]]
    del_children*: Option[seq[int]]

proc is_empty*(u: UpdateEl): bool =
  u.set.is_empty and u.set_attrs.is_empty and u.del_attrs.is_empty and u.set_children.is_empty and
    u.del_children.is_empty

# helpers ------------------------------------------------------------------------------------------
proc add*(parent: El, child: El | seq[El]) =
  parent.children.add child

template els*(code): seq[El] =
  block:
    let it {.inject.} = "`it` is not available in the 'els' block"
    var it_content {.inject.}: seq[El]
    code
    it_content

# html el ------------------------------------------------------------------------------------------
template add_or_return*(e_arg: El): auto =
  let e = e_arg
  assert not e.is_nil
  # Order is important, first `it` should be checked, see "nesting, from error" test case
  when compiles(it.add(e)):         it.add(e)
  elif compiles(it_content.add(e)): it_content.add(e)
  else:                             e

template el*(html: string, code): auto =
  let el = block:
    let it {.inject.} = El.init(tag = fmt(html, '{', '}'))
    let it_content {.inject.} = "`it_content` is not available in the 'el' html block"
    code
    it
  add_or_return el

template el*(html: string): auto =
  el(html):
    discard


El* = ref object
  tag*:           string
  attrs*:         JsonNode
  children*:      seq[El]
  extras*:        Option[ElExtras]
  nattrs_cached*: Option[JsonNode]

# diff ---------------------------------------------------------------------------------------------
proc diff*(id: openarray[int], old_el, new_el: El): seq[UpdateElement] =
  # Using shallow_equal to avoid attribute normalisation as it's a heavy operation
  if new_el.shallow_equal(old_el):
    for i, new_child in new_el.children:
      let old_child = old_el.children[i]
      result.add diff(id & [i], old_child, new_child)
    return

  let update = UpdateElement(el: id.to_seq)
  result.add update

  let (new_attrs, old_attrs) = (new_el.nattrs, old_el.nattrs)
  if "value" in new_attrs: new_attrs.normalise_value
  if "value" in old_attrs: old_attrs.normalise_value

  block: # tag
    if new_attrs["tag"] != old_attrs["tag"]:
      update.set = new_el.to_json.some
      return

  block: # Attrs
    var set_attrs: Table[string, JsonNode]
    for k, v in new_attrs:
      if k notin old_attrs or v != old_attrs[k]:
        set_attrs[k] = v

    var del_attrs: seq[string]
    for k, v in old_attrs:
      if k notin new_attrs:
        del_attrs.add k

    if not set_attrs.is_empty: update.set_attrs = set_attrs.some
    if not del_attrs.is_empty: update.del_attrs = del_attrs.some

  block: # Children
    var set_children: Table[string, JsonNode]
    for i, new_child in new_el.children:
      if i > old_el.children.high:
        set_children[$i] = new_child.to_json
      else:
        let old_child = old_el.children[i]
        if (not new_child.shallow_equal(old_child)) and (new_child.nattrs["tag"] != old_child.nattrs["tag"]):
          # If tag is different replacing
          set_children[$i] = new_child.to_json
        else:
          result.add diff(id & [i], old_child, new_child)

    var del_children: seq[int]
    if new_el.children.len < old_el.children.len:
      del_children = ((new_el.children.high + 1)..old_el.children.high).to_seq

    if not set_children.is_empty: update.set_children = set_children.some
    if not del_children.is_empty: update.del_children = del_children.some

proc attr*[T](self: El, k: string, v: T) =
  self.attrs[k] = v.to_json

proc value*[T](self: El, v: T) =
  self.attr("value", v)

proc text*[T](self: El, text: T) =
  self.attr("text", text)

proc style*(self: El, style: string) =
  self.attr("style", style)

proc class*(self: El, class: string) =
  let class = if "class" in self.attrs: self.attrs["class"].get_str & " " & class else: class
  self.attr "class", class

proc location*[T](self: El, location: T) =
  self.attr("href", location.to_s)

proc escape_html_text(s: string): SafeHtml = s.escape_html
proc escape_html_attr_name(name: string): SafeHtml = name.escape_html
proc escape_html_attr_value(v: JsonNode): SafeHtml =
  # (if v.kind == JString: "\"" & v.get_str.escape_html & "\"" else: v.to_s(false).escape_html)
  "\"" & (if v.kind == JString: v.get_str.escape_html else: v.to_s(false).escape_html) & "\""

proc to_html*(el: JsonNode, indent = "", comments = false): SafeHtml =
  assert el.kind == JObject, "to_html element data should be JObject"
  if comments and "c" in el:
    result.add "\n" & indent & fmt"""<!-- {el["c"].get_str.escape_html_text} -->""" & "\n"
  let tag = if "tag" in el: el["tag"].get_str else: "div"
  var attr_tokens: seq[string]
  let el = el.sort
  for k, v in el.fields:
    if k in ["c", "tag", "children", "text", "html"]: continue
    attr_tokens.add k.escape_html_attr_name & "=" & v.escape_html_attr_value
  result.add indent & "<" & tag
  if not attr_tokens.is_empty:
    result.add " " & attr_tokens.join(" ")
  result.add ">"
  if "text" in el:
    assert "children" notin el, "to_html doesn't support both text and children"
    assert "html"     notin el, "to_html doesn't support both text and html"
    let safe_text = if el["text"].kind == JString:
      el["text"].get_str.escape_html_text
    else:
      el["text"].to_s(false).escape_html_text
    result.add safe_text & "</" & tag & ">"
  elif "html" in el:
    assert "children" notin el, "to_html doesn't support both html and children"
    assert el["html"].kind == JString, "html should be string"
    result.add "" & el["html"].get_str & "</" & tag & ">"
  elif "children" in el:
    let children = el["children"]
    assert children.kind == JArray, "to_html element children should be JArray"
    result.add "\n"
    for v in children:
      result.add v.to_html(indent = indent & "  ", comments = comments) & "\n"
    result.add indent & "</" & tag & ">"
  else:
    # result.add "/>"
    result.add "</" & tag & ">"
  if comments and "c" in el:
    result.add "\n"
  result = result.replace(re"\n\n\n", "\n\n")

proc to_html*(el: El, indent = "", comments = false): string =
  el.to_json.to_html(indent = indent, comments = comments)

proc to_html*(els: openarray[El], indent = "", comments = false): string =
  els.map((el) => el.to_html(indent = indent, comments = comments)).join("\n").replace(re"\n\n\n", "\n\n")

proc to_json_hook*(self: El): JsonNode =
  var json = if self.children.is_empty:
    self.nattrs.sort
  else:
    # p self.tag
    self.nattrs.sort.alter((attrs: JsonNode) => (attrs["children"] = self.children.to_json))

  if "tag" in json and json["tag"].get_str == "div": json.delete "tag"

  if "value" in json: json.normalise_value

  if self.extras.is_some:
    if self.extras.get.on_click.is_some:    json["on_click"] = true.to_json
    if self.extras.get.on_dblclick.is_some: json["on_dblclick"] = true.to_json
    if self.extras.get.on_keydown.is_some:  json["on_keydown"] = true.to_json
    if self.extras.get.on_change.is_some:   json["on_change"] = true.to_json
    if self.extras.get.on_blur.is_some:     json["on_blur"] = true.to_json
    if self.extras.get.on_input.is_some:    json["on_input"] = true.to_json

  json


Different HTML inputs use different attributes for value
proc normalise_value*(el: JsonNode) =
  let tag = if "tag" in el: el["tag"].get_str else: "div"
  if tag == "input" and "type" in el and el["type"].get_str == "checkbox":
    let value = el["value"]
    el.delete "value"
    assert value.kind == JBool, "checkbox should have boolean value type"
    if value.get_bool:
      el["checked"] = true.to_json

proc init*(_: type[El], tag = "", attrs = new_JObject(), children = seq[El].init): El =
  El(tag: tag, attrs: attrs, children: children)

proc shallow_equal(self, other: El): bool =
  # Avoiding attribute normalisation as it's a heavy operation
  self.tag == other.tag and self.attrs == other.attrs and self.children.len == other.children.len

proc nattrs*(self: El): JsonNode =
  # Normalised attributes. El stores attributes in shortcut format,
  # like`"tag: ul.todos checked"`, normalisation delayed to improve performance.
  if self.nattrs_cached.is_none:
    let nattrs = self.attrs.copy
    let (parsed_tag, parsed_attrs) = parse_tag(self.tag)
    for k, v in parsed_attrs:
      if k in nattrs:
        case k
        of "class": nattrs["class"] = (v & " " & nattrs["class"].get_str).to_json
        else:       throw fmt"can't redefine attribute '{k}' for '{self.attrs}'"
      else:
        nattrs[k] = v.to_json
    # if "tag" notin nattrs: nattrs["tag"] = "div".to_json
    nattrs["tag"] = parsed_tag.to_json
    if "c" in nattrs:
      let class = if "class" in nattrs: nattrs["class"].get_str else: ""
      let delimiter = if class.is_empty: "" else: " "
      nattrs["class"] = (nattrs["c"].get_str & " C" & delimiter & class).to_json
    self.nattrs_cached = nattrs.sort.some
  return self.nattrs_cached.get

El* = ref object
    tag*:           string
    attrs*:         JsonNode
    children*:      seq[El]
    extras*:        Option[ElExtras]
    nattrs_cached*: Option[JsonNode]





proc init*(_: type[El], tag = "", attrs: openarray[(string, string)] = seq[(string, string)].init): El =
  var (parsed_tag, parsed_attrs) = parse_tag(tag)
  for (k, v) in attrs:
    if k in parsed_attrs:
      case k
      of "class": parsed_attrs["class"] = v & " " & parsed_attrs["class"]
      else:       throw fmt"can't redefine attribute '{k}' for '{tag}'"
    else:
      parsed_attrs[k] = v
  El(kind: ElKind.el, tag: parsed_tag, attrs: parsed_attrs)


proc PSearch*(title = "Found", more: int, content: seq[El]): El =
  el".pt-3.pb-3":
    el".float-right.mr-8.mt-1":
      el(PIconButton, (icon: "cross"))
    el".pl-8.mb-2 .text-xl":
      it.text title
    el"":
      it.add content

    if more > 0:
      el".pl-8.pr-8.mb-2.float-right":
        el(PTextButton, (text: fmt"{more} more"))


proc PTextBlock*(
  html: SafeHtml, warns: seq[string] = @[], controls: seq[El] = @[], tags: seq[(string, string)] = @[]
): El =
  block_layout(warns, controls, tags, true):
    el".ftext flash": # Body
      it.attr("html", html)

proc PListBlock*(
  html: SafeHtml, controls = seq[El].init, warns: seq[string] = @[], tags: seq[string] = @[]
): El =
  block_layout(warns, controls, tags, true):
    el".ftext flash": # Body
      it.attr("html", html)

proc PCodeBlock*(
  code: string, warns: seq[string] = @[], controls: seq[El] = @[], tags: seq[(string, string)] = @[]
): El =
  block_layout(warns, controls, tags, true):
    el".ftext flash": # Body
      it.attr("html", "<pre>" & code.escape_html & "</pre>")

proc PImagesBlock*(
  images: seq[string], warns: seq[string] = @[], controls: seq[El] = @[], tags: seq[(string, string)] = @[]
): El =
  template render_td =
    el"td":
      if col.is_even:
        it.style "width: 1.33%;"
      else:
        it.style "width: 24%; text-align: center; vertical-align: middle;"
        if i < images.len:
          # flex needed to align vertically
          el".flex .rounded.overflow-hidden.border.border-gray-300.bg-slate-50":
            it.style "width: 100%; aspect-ratio: 1;" # making height same as width so cell will be square
            el"img.block.ml-auto.mr-auto": # centering horizontally
              # Limiting image max height and width
              it.style "object-fit: contain; max-width: 100%; max-height: 100%; width: auto; height: auto;"
              it.attr("src", images[i])
              i.inc

  block_layout(warns, controls, tags, true):
    if images.len <= 4:
      el"table cellspacing=0 cellpadding=0 flash": # removing cell borders
        # el"tdata":
        el"tr":
          var i = 0
          for col in 0..(images.high * 2 - 2):
            render_td()
    else:
      el"table cellspacing=0 cellpadding=0 flash":
        # setting margin after each row
        it.style "border-spacing: 0 0.6rem; margin: -0.6rem 0; border-collapse: separate;"
        # el"tdata":
        var i = 0
        for row in 0..(images.len / 4).floor.int:
          el"tr":
            for col in 0..6:
              render_td()

proc to_html*(blk: FListBlock, doc: FDoc, space_id: string, config = default_config): SafeHtml =
  let context: FEmbedContext = (blk, doc, space_id)
  var html = ""
  for i, list_item in blk.list:
    html.add "<p>" & list_item.to_html(context, config) & "</p>"
    if i < blk.list.high: html.add "\n"
  html


proc to_html*(blk: FTextBlock, doc: FDoc, space_id: string, config = default_config): SafeHtml =
  let context: FEmbedContext = (blk, doc, space_id)
  var html = ""
  for i, pr in blk.formatted_text:
    case pr.kind
    of text:
      html.add "<p>" & pr.text.to_html(context, config) & "</p>"
    of list:
      html.add "<ul>\n"
      for j, list_item in pr.list:
        html.add "  <li>" & list_item.to_html(context, config) & "</li>"
        if j < pr.list.high: html.add "\n"
      html.add "</ul>"
    if i < blk.formatted_text.high: html.add "\n"
  html


type PLayout* = ref object of Component
  left*, right*: seq[El]

proc set_attrs*(self: PLayout) =
  discard

proc render*(self: PLayout): El =
  el""".w-full .flex {nomockup".min-h-screen"}""":
    el"$PLeft .w-9/12":
      it.add self.left
    el""".w-3/12 .relative {nomockup".right-panel-hidden-icon"} .border-gray-300 .border-l .bg-slate-50""":
      # el".absolute .top-0 .right-0 .m-2 .mt-4":
      #   el(PIconButton, (icon: "controls"))
      el"""$PRight {nomockup".right-panel-content"} .pt-2""":
        it.add self.right

# Templates

- Difference with HTML Templates
- Clean UI with Components similar to Svelte or JSX.
- Components are interactive atomic blocks.

- Stateless Functional and Stateful Object Components.
- Slots, block passed as additional `content: seq[El]` argument.
- Also, custom slots could be used in block scope, like `layout.left/right`.

- Template is plain Nim code.
- Tag shortcut helps keep code small.

- No wait for Nim compilation, plays well with Tailwind, autocomplete etc.

- mono/examples/todo.nim keep/palette.nim
- Very small impl size, ~500 lines, mono/core/tmpl_test.nim

proc c*(self: El, c: string) =
  self.attr("c", c)


var new_tree: HtmlElement =
  when typeof(rendered) is seq[HtmlElement]:
    assert rendered.len == 1, "rendered must have exactly one element"
    rendered[0]
  else:
    rendered

proc get_child_component*[T](
  self: Component, ChildT: type[T], id: string, set_attrs: (proc(component: T))
): T =
  let child = self.get_child_component(ChildT, id)
  child.set_attrs # setting on new or overriding attributes on existing children
  child

# component.h --------------------------------------------------------------------------------------
import base, ./html_element, ./component, ./h

type Child1 = ref object of Component
  v1: int

proc init(_: type[Child1]): Child1 = Child1()
proc set_attrs(self: Child1, v1: int) = self.v1 = v1
proc render(self: Child1): HtmlElement = el".child1"

type Child2 = ref object of Component
  v2: string

proc init(_: type[Child2]): Child2 = Child2()
proc set_attrs(self: Child2, v2: string) = self.v2 = v2
proc render(self: Child2): seq[HtmlElement] = @[el".child21", el".child22"]

type Parent1 = ref object of Component

proc render(self: Parent1): HtmlElement =
  el".parent":
    self.h(Child1, "c1", (c: Child1) => c.set_attrs(0))
    self.h(Child2, "c2", (v2: "some"))

test "component.h":
  let parent = Parent1()
  discard parent.render()


# h for tuple --------------------------------------------------------------------------------------
# template bh*(attrs: tuple): HtmlElement =
#   let el = HtmlElement.init
#   for k, v in attrs.field_pairs:
#     if k == "tag": el.tag = fmt(v, '{', '}')
#     else:          el.attr(k, v)
#   el

# template h*(attrs: tuple) =
#   it.children.add bh(attrs)

# template h*(attrs: tuple, code) =
#   let parent = it
#   block:
#     let it {.inject.} = bh(attrs)
#     code
#     parent.children.add it

# test "h tuple":
#   let html = el".a":
#     h (tag: ".b", class: "c", text: "t1"):
#       it.attr("k", "v")
#       it.on_click(proc (e: auto) = discard)

#   check html.to_html == """
#     <div class="a">
#       <div class="b c" k="v" on_click="true">t1</div>
#     </div>
#   """.dedent.trim

proc to_meta_html*(el: JsonNode): tuple[meta, html: string] =
  # If the root element is "document", excluding it from the HTML
  assert el.kind == JObject, "to_html element data should be JObject"
  let tag = if "tag" in el: el["tag"].get_str else: "div"
  var meta: seq[string]
  if tag == "document":
    if "title" in el:
      meta.add "<title>" & el["title"].get_str.escape_html_text & "</title>"
    if "location" in el:
      meta.add "<meta name=\"location\" content=" & el["location"].escape_html_attr_value & "/>"
    let children = el["children"]
    assert children.kind == JArray, "to_html element children should be JArray"
    (meta.join("\n"), children.to_seq.map((el) => el.to_html).join("\n"))
  else:
    (meta.join("\n"), el.to_html)

test "to_meta_html":
  let el = %{ tag: "document", title: "some", children: [
    { class: "counter" }
  ] }
  check el.to_meta_html == (
    meta: """<title>some</title>""",
    html: """<div class="counter"></div>"""
  )

proc to_html(meta: HtmlMeta): string =
  var tags: seq[string]
  if not meta.title.is_empty:
    tags.add "<meta name=\"title\" content=" & meta.title.escape_html_attr_value & "/>"
  tags.join("\n")

proc to_meta_html*(el: JsonNode): tuple[meta, html: string] =
  let (html, document) = el.to_html_and_document
  (meta: document.document_to_meta, html: html)



# template h*[T](self: Component, ChildT: type[T], id: string): seq[HtmlElement] =
#   self.h(ChildT, id, proc(c: T) = (discard))



# document_h ---------------------------------------------------------------------------------------
# template document_h*(title: string, location: Url, code): HtmlElement =
#   h"document":
#     discard it.attr("title", title)
#     discard it.attr("location", location)
#     code

# test "document_h":
#   let html = document_h("t1", Url.init("/a")):
#     + h"div"
#   check html.to_json == """{"title":"t1","location":"/a","tag":"document","children":[{"tag":"div"}]}""".parse_json

# h ------------------------------------------------------------------------------------------------
# converter to_html_elements*(el: HtmlElement): seq[HtmlElement] =
#   # Needed to return single or multiple html elements from render
#   @[el]

# template content*(el: HtmlElement): HtmlElement =
#   el

# template content*(el: HtmlElement, code): HtmlElement =
#   let node = el
#   block:
#     let it {.inject.} = node
#     code
#   node

# test "h":
#   let html = h".blog".window_title("Blog").content:
#     + h".posts"

#   check html.to_html == """
#     <div class="blog" window_title="Blog">
#       <div class="posts"></div>
#     </div>
#   """.dedent.trim